¿emite algún aviso el proceso de compilado o enlazado?
Si, el error de ld fue: 
ld: aviso: no se puede encontrar el símbolo de entrada _start; se usa por defecto 0000000000100000
El comando --entry de ld hace que se le indique en que función comenzará el programa. Indicando con -e comienzo podemos corregir este error.

El consumo de CPU del kernel es: 100,7% segun el comando top
Lo que está haciendo es ejecutar un loop infinito con ninguna instruccion dentro.


una vez invocado hlt ¿cuándo se reanuda la ejecución?
Se reanuda cuando ocurra una interrupción.


Uso de procesador:
                USO       Eventos/seg
Sin hlt:    990,7 ms/s      0,00      
Con hlt:     7,5 ms/s       152,6   

    
Stack Pointer: $esp = 0x6f08
Registro eax = 0x2badb002
Registro ebx =       0x0000024f	                0x0000027f	                            0x0001fb80	                        0x8000ffff
                          ^                          ^                                       ^                                  ^
    Word con los flags de configuracion    Direccion inicial de memoria asignada    Direccion final de memoria asignada     Dice de que dispositivo el bootloader cargó el sistema operativo.

el campo flags en formato binario (x/1tw $ebx): 00000000000000000000001001001111

la cantidad de memoria “baja” en formato decimal (x/2dw $ebx): 591	639 <- Este es el que nos importa ; ¿en qué unidad está? Está en KiloBytes 

la línea de comandos o “cadena de arranque” recibida por el kernel (x/s 0x00101000) = "kern0 "


qué se imprime por pantalla al arrancar?
    Se imprime arriba a la izquierda de la pantalla la palabra OK

qué representan cada uno de los valores enteros (incluyendo 0xb8000)?
    0xb8000 es la direccion de memoria para el buffer de video, esta direccion recibe un caracter ascii para imprimir en pantalla, en el siguiente byte debe ingresarse el color del cual queremos que esa letra se imprima en pantalla.

por qué se usa el modificador volatile para el puntero al buffer?
    Se usa para indicarle al compilador que el contenido de esa variable puede ser modificado fuera de nuestro programa. Entonces cada vez que nuestro programa lo quiera usar, va a volver a leer el contenido de esa variable. Recordemos que esa es la direccion de memoria del buffer de video, que podria tambien ser utilizado y modificado por otros programas tambien.

kern0-endian:
La salida del programa es: "He110 World"
El programa siguiente describe porque se imprime esto:
#include <stdio.h>

int main(void) {
    unsigned int i = 0x00646c72; //'null','d','l','r'
    printf("H%x Wo%s\n", 57616, (char *) &i);
    //57616 to hexa = E110, Printf(%x) imprime el numero en hexadecimal
}
hacer (char *) &i quiere decir que se toma como puntero a un byte y se lo lee como char a la direccion de memoria de i. El primer digito almacenado en i es 'r' y el ultimo es '\0' Porque la arquitectura es little endian.

Para que el programa funcione en una arquitectura big endian. habria que modificar la linea:
unsigned int i = 0x00646c72; //'null','d','l','r' Por: unsigned int i = 0x726c6400;

Ej: x86-write
¿Por qué se le resta 1 al resultado de sizeof?
    Para no imprimir el caracter de fin de string.
¿Funcionaría el programa si se declarase msg como const char *msg = "...";? ¿Por qué?
    No funcionaria, porque el sizeof devuelve la longitud de un puntero a char, lo cual no es lo mismo que la longitud del contenido de msg.
Explicacion libc_hello:
    Se pushea a la pila la variable len que tiene la cantidad de caracteres del string
    Se puseha a la pila el string a imprimir
    Se pushea a la pila el numero 1
    Se llama a la syscall "write"
    Se pushea a la pila el numero 7
    Se llama a la syscall "_exit"

Hex dump de la salida de ./libc_hello (con instruccion .ascii):
0000000  48  65  6c  6c  6f  2c  20  77  6f  72  6c  64  21  0a
          H   e   l   l   o   ,       w   o   r   l   d   !  \n
0000016

Hex dump de la salida de ./libc_hello (con instruccion .asciz):
0000000  48  65  6c  6c  6f  2c  20  77  6f  72  6c  64  21  0a  00
          H   e   l   l   o   ,       w   o   r   l   d   !  \n  \0
0000017

La diferencia entre ambos es el '\0' al final del segundo. Esto se debe a que .asciz imprime strings con un zero al final.

Ej: x86-libc
Salida de nm -u int80_hi:
         w __cxa_finalize@@GLIBC_2.1.3
         w __gmon_start__
         w _ITM_deregisterTMCloneTable
         w _ITM_registerTMCloneTable
         U __libc_start_main@@GLIBC_2.

Salida de nm -u int80_hi_strlen:
         w __cxa_finalize@@GLIBC_2.1.3
         w __gmon_start__
         w _ITM_deregisterTMCloneTable
         w _ITM_registerTMCloneTable
         U __libc_start_main@@GLIBC_2.0
         U strlen@@GLIBC_2.0

¿qué significa que un registro sea callee-saved en lugar de caller-saved?
    Callee-saved significa que la funcion que esta utilizando ese registro se encarga de guardarlo.
    Caller-saved significa que la funcion que llama a otra funcion se encarga de guardar ese registro que este utilizando.

en x86 ¿de qué tipo, caller-saved o callee-saved, es cada registro según la convención de llamadas de GCC?
    Son Caller-saved: EAX, ECX y EDX
    Son Callee-saved: EBP, EBX, EDI y ESI

Ej: x86-frames
¿dónde se encuentra (de haberlo) el primer argumento de f?
    Se encuentra en la ultima posicion de la pila

¿dónde se encuentra la dirección a la que retorna f cuando ejecute ret?
    Se encuentra en 


